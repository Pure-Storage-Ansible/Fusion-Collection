- name: Create Region foo_region
  purestorage.fusion.fusion_region:
    name: "foo_region"
    display_name: "foo Region"
  register: result
  environment: "{{ test_env }}"
- name: Validate the task
  ansible.builtin.assert:
    that:
      - result is success
      - result is changed

- name: Collect Regions and verify the region exists
  environment: "{{ test_env }}"
  purestorage.fusion.fusion_info:
    gather_subset: regions
  register: fusion_info
- name: Validate the task
  ansible.builtin.assert:
    that: "'foo_region' in fusion_info['fusion_info']['regions']"

- name: Update Region display_name
  purestorage.fusion.fusion_region:
    name: "foo_region"
    display_name: "new foo Region"
  register: result
  environment: "{{ test_env }}"
- name: Validate the task
  ansible.builtin.assert:
    that:
      - result is success
      - result is changed

- name: Delete Region
  purestorage.fusion.fusion_region:
    name: "foo_region"
    state: absent
  register: result
  environment: "{{ test_env }}"
- name: Validate the task
  ansible.builtin.assert:
    that:
      - result is success
      - result is changed

- name: Collect Regions and verify the region does not exist
  environment: "{{ test_env }}"
  purestorage.fusion.fusion_info:
    gather_subset: regions
  register: fusion_info
- name: Validate the task
  ansible.builtin.assert:
    that: "'foo_region' not in fusion_info['fusion_info']['regions']"
